<!-- templates/App/dashboard.html -->
{% extends "Super-Admin/Base/SA.html" %}

{% block title %}Dashboard - IncognitoVault{% endblock %}

{% block page_header %}Dashboard{% endblock %}

{% block content %}

     <style>
         .card {
             border: 1px solid #ccc;
             padding: 20px;
             margin: 10px;
             border-radius: 8px;
             width: 250px;
             display: inline-block;
             text-align: center;
         }
         .card-title {
             font-size: 18px;
             margin-bottom: 10px;
         }
         .led-indicator {
             width: 30px;
             height: 30px;
             border-radius: 50%;
             margin-top: 10px;
         }
         .green { background-color: green; }
         .red { background-color: red; }
         .card-body {
             display: flex;
             justify-content: center;
         }
         .gauge-container {
             height: 180px;
             width: 180px;
             margin-top: 20px;
         }
     </style>


         <!-- Cards for Metrics -->
         <div class="card" id="cpu-card">
             <div class="card-title">CPU Usage</div>
             <div class="card-body">
                 <div id="cpu-meter"></canvas>
             </div>
         </div>
     
         <div class="card" id="memory-card">
             <div class="card-title">Memory Usage</div>
             <div class="gauge-container">
                 <div id="memory-meter"></div>
             </div>
         </div>
     
         <div class="card" id="disk-card">
             <div class="card-title">Disk Usage</div>
             <div class="gauge-container">
                 <div id="disk-meter"></div>
             </div>
         </div>
     
         <div class="card" id="network-card">
             <div class="card-title">Network Speed</div>
             <div class="gauge-container">
                 <div id="network-meter"></div>
             </div>
         </div>

         <div class="card" id="network-card">
            <div class="card-title">Network Speed</div>
            <div class="gauge-container">
                <div id="ping-latency"></div>
            </div>
        </div>
     
         <div class="card" id="redis-card">
             <div class="card-title">Redis Connection</div>
             <div class="led-indicator" id="redis-led"></div>
         </div>
     
         <div class="card" id="mysql-card">
             <div class="card-title">MySQL Connection</div>
             <div class="led-indicator" id="mysql-led"></div>
         </div>

         <!-- Add Raphael.js before JustGage.js -->
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/raphael@2.3.0/raphael.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/justgage@1.3.2/justgage.min.js"></script>


<script>
let cpuChart;  // Declare global variable to store the CPU chart
let memoryChart;  // Declare global variable to store the memory chart
let diskChart;  // Declare global variable to store the disk chart
let networkChart;  // Declare global variable to store the network chart

// Destroy previous chart before creating a new one
function destroyChart(chart) {
    if (chart && chart.destroy) {
        chart.destroy();  // Ensure chart.destroy() is called only if chart is a valid Chart instance
    }
}

// Function to update the card with chart data
function updateCard(chartId, value) {
    const ctx = document.getElementById(chartId).getContext('2d');
    
    // Destroy previous chart instance to avoid conflict
    if (window[chartId]) {
        destroyChart(window[chartId]);
    }

    // Create a new chart and store it in the global variable
    window[chartId] = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ['Used', 'Free'],
            datasets: [{
                label: chartId,
                data: [parseFloat(value.split(' ')[0]), 100 - parseFloat(value.split(' ')[0])],
                backgroundColor: ['#ffcc00', '#33cc33'],
            }],
        },
        options: {
            responsive: true,
            animation: {
                animateScale: true,
                animateRotate: true
            },
            plugins: {
                tooltip: {
                    callbacks: {
                        label: function (tooltipItem) {
                            return tooltipItem.raw + ' %';
                        },
                    },
                },
            },
        },
    });
}

// CPU meter (percentage usage)
function updateCPUMeter(elementId, value) {
    if (typeof JustGage !== 'undefined') {  // Check if JustGage is loaded
        // Clear the previous gauge if it exists
        var gaugeElement = document.getElementById(elementId);
        if (gaugeElement) {
            // Destroy the old gauge
            gaugeElement.innerHTML = '';
        }

        // Create a new CPU usage gauge
        var gauge = new JustGage({
            id: elementId,
            value: value,
            min: 0,
            max: 100,
            title: 'CPU Usage %',
            label: 'Used (%)',  // Display percentage label
            levelColors: ['#FF0000', '#F1C40F', '#2ECC71'],
            animationSpeed: 1000, // Animation speed for smooth transitions
        });
    } else {
        console.error("JustGage is not defined. Please check the script loading.");
    }
}


// Analog Meter for Memory, Disk, and Network
function updateMemoryDiskMeter(elementId, value) {
    if (typeof JustGage !== 'undefined') {  // Check if JustGage is loaded
        // Clear the previous gauge if it exists
        var gaugeElement = document.getElementById(elementId);
        if (gaugeElement) {
            // Destroy the old gauge
            gaugeElement.innerHTML = '';
        }

        // Create a new gauge with updated value
        var gauge = new JustGage({
            id: elementId,
            value: value,
            min: 0,
            max: 100,
            title: 'Usage %',
            label: 'Used',
            levelColors: ['#FF0000', '#F1C40F', '#2ECC71'],
            animationSpeed: 1000, // Animation speed for smooth transitions
        });
    } else {
        console.error("JustGage is not defined. Please check the script loading.");
    }
}

// Network meter (upload and download)
function updateNetworkMeter(elementId, uploadSpeed, downloadSpeed) {
    if (typeof JustGage !== 'undefined') {  // Check if JustGage is loaded
        // Clear the previous gauge if it exists
        var gaugeElement = document.getElementById(elementId);
        if (gaugeElement) {
            // Destroy the old gauge
            gaugeElement.innerHTML = '';
        }

        // Create a new gauge with updated value
        var gauge = new JustGage({
            id: elementId,
            value: Math.max(parseFloat(uploadSpeed.split(' ')[0]), parseFloat(downloadSpeed.split(' ')[0])),
            min: 0,
            max: 100,
            title: 'Network Speed',
            label: 'Mbps',
            levelColors: ['#FF0000', '#F1C40F', '#2ECC71'],
            animationSpeed: 1000, // Animation speed for smooth transitions
        });
    } else {
        console.error("JustGage is not defined. Please check the script loading.");
    }
}

// LED Indicator for Redis & MySQL
function updateLEDIndicator(ledId, status) {
    const led = document.getElementById(ledId);
    if (led) {
        if (status.includes('Connected')) {
            led.className = 'led-indicator green';
        } else {
            led.className = 'led-indicator red';
        }
    }
}

// Fetching health data from the server
async function fetchHealthData() {
    try {
        const response = await fetch('/health');
        const healthData = await response.json();

        const cpuUsage = parseFloat(healthData.cpu_usage.split(' ')[0]);
        updateCPUMeter('cpu-meter', cpuUsage);

        // Update memory usage card (Analog meter)
        const memoryUsage = parseFloat(healthData.memory_usage.split(' ')[0]);
        updateMemoryDiskMeter('memory-meter', memoryUsage);

        // Update disk usage card (Analog meter)
        const diskUsage = parseFloat(healthData.disk_usage.split(' ')[0]);
        updateMemoryDiskMeter('disk-meter', diskUsage);

        // Update network speed card (Analog meter)
        const uploadSpeed = healthData.upload_speed;
        const downloadSpeed = healthData.download_speed;
        updateNetworkMeter('network-meter', uploadSpeed, downloadSpeed);

        // Update Redis LED indicator
        const redisStatus = healthData.redis_status;
        updateLEDIndicator('redis-led', redisStatus);

        // Update MySQL LED indicator
        const mysqlStatus = healthData.mysql_status;
        updateLEDIndicator('mysql-led', mysqlStatus);

        // Update Ping latency (Check if the element exists)
        const pingLatency = healthData.ping_latency;
        const pingElement = document.getElementById('ping-latency');
        if (pingElement) {
            pingElement.textContent = pingLatency;
        } else {
            console.error("Element with id 'ping-latency' not found.");
        }

    } catch (error) {
        console.error('Error fetching health data:', error);
    }
}

// Set interval to fetch health data every 5 seconds
setInterval(fetchHealthData, 5000);

// Initial fetch when page loads
fetchHealthData();

</script>
{% endblock %}